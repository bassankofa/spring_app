package com.my_app.db_access;

import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.NoResultException;
import javax.persistence.PersistenceUnit;
import javax.persistence.Query;

import org.hibernate.service.spi.InjectService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder;
import org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller // This means that this class is a Controller
@RequestMapping(path = "/demo") // This means URL's start with /demo (after Application path)
public class GreetingController {
    @Autowired
    // (required = false) // This means to get the bean called utilisateurRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    // private UtilisateurRepository repo;

    UserRepository repo;

    // @Bean
    /*
     * public UtilisateurRepository utilisateurRepository() {
     * 
     * // EmbeddedDatabaseBuilder builder = new EmbeddedDatabaseBuilder(); return
     * null; // builder.setType(EmbeddedDatabaseType.HSQL).build(); }
     * 
     * 
     * @Autowired EntityManager entityManager;
     */

    @PostMapping(path = "/add") // Map ONLY POST Requests
    public @ResponseBody String addNewUser(@RequestParam String name, @RequestParam String email) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        System.out.println("Test \n");

        User n = new User();

        n.setNom(name);
        n.setEmail(email);
        repo.save(n);

        return "\n " + name + " \n";
    }

    @GetMapping(path = "/all")
    public @ResponseBody Iterable<User> getAllUsers() { // This returns a JSON or XML with the users return
        return repo.findAll();
    }

    /*
     * @Override public List<Utilisateur> findAll() { try { String sql =
     * "SELECT coalesce(max(e.id), 0) FROM Employee e"; Query query =
     * entityManager.createQuery(sql); return (List<Utilisateur>
     * )query.getSingleResult(); } catch (NoResultException e) { return null; } }
     */
}